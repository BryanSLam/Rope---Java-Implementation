

public class Node 
{
	private String string;
	private Node leftNode;
	private Node rightNode;
	
	public Node(String s)
	{
		string = s;
	}
	
	
	public void addChild(Node n)
	{
		
	}
	public String getString()
	{
		return string;
	}
	
	//To calculate the weight, get the weight of the node's left child and the weight of all
	//the nodes in it's right subtree
	
	//Recursive method
	private int weight(Node n)
	{
		if(n.getRight() == null)
		{
			return n.getString().length();
		}
		return n.getString().length() + weight(n.getRight());
	}
	
	//To get the weight you have to call the getWeight starting with the first node on the left subtree
	public int getWeight()
	{
		//If there's no left subtree, return the length of the string
		if(this.leftNode == null)
		{
			return string.length();
		}
		return weight(this.leftNode);
	}
	
	//Index returns the character at position i
	//Runs in O(log n) n being the length of the rope
	
	//Given the position of the character i, start at the root, given the weight of a node.
	//If the weight is greater than or equal to i and a left child exists, go to the left child.
	//If the weight is greater than or equal to i and no left child exists, return the node's string
	//at character position i
	//If the weight is less than the given i then subtract the weight from i (i = i-weight) and go
	//to the right child
	
	public char index(Node node, int i)
	{
		
	}
	
	public Node getLeft()
	{
		return leftNode;
	}
	public Node getRight()
	{
		return rightNode;
	}
}
